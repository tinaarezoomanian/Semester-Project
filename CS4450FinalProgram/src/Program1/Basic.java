/***************************************************************
* file: Basic.java
* author: Kenneth Chau, Tina Arezoomanians, Kelly Lwin
* class: CS 4450.01 (S25-Regular) Computer Graphics
*
* assignment: Final Program
* date last modified: 05/04/2025
* 
* purpose: The program create an original scene in MineCraft fashion.
* note: The program contains code that is assisted but not generated by AI.
****************************************************************/
package Program1;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.glu.GLU;

import java.util.ArrayList;
import java.util.List;

public class Basic {

    // Window constants
    private static final int WINDOW_WIDTH = 640;
    private static final int WINDOW_HEIGHT = 480;
    private static final int FRAME_RATE = 60;
    private static final String WINDOW_TITLE = "Final Program Checkpoint 3";
    
    // Camera instance
    private Camera camera;
    private boolean isDay = true;

    // Chicken list
    private List<Chicken> chickens = new ArrayList<>();

    // Start the program: create the window, initialize OpenGL, and run the render loop.
    public void start() {
        try {
            createWindow();
            initGL();
            camera = new Camera(30.0f, 30.0f, 100.0f);
            Skybox.initSkybox(); // Initialize sky box

            // Spawn chickens at random terrain positions
            for (int i = 0; i < 10; i++) {
                float x = (float)(Math.random() * TerrainGenerator.WIDTH) * 2;
                float z = (float)(Math.random() * TerrainGenerator.DEPTH) * 2;
                chickens.add(new Chicken(x, z));
            }

            render();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    // Creates an OpenGL window.
    private void createWindow() throws Exception {
        Display.setFullscreen(false);
        Display.setDisplayMode(new DisplayMode(WINDOW_WIDTH, WINDOW_HEIGHT));
        
        // Center the window on the desktop.
        DisplayMode desktop = Display.getDesktopDisplayMode();
        int x = (desktop.getWidth() - WINDOW_WIDTH) / 2;
        int y = (desktop.getHeight() - WINDOW_HEIGHT) / 2;
        Display.setLocation(x, y);

        Display.setTitle(WINDOW_TITLE);
        Display.create();
        
        // Capture the mouse for first-person look control.
        org.lwjgl.input.Mouse.setGrabbed(true);
    }

    // Initializes OpenGL settings.
    private void initGL() {
        // Enable depth testing and textures.
        GL11.glEnable(GL11.GL_DEPTH_TEST);
        GL11.glEnable(GL11.GL_TEXTURE_2D);
        
        // initialize lighting
        Lighting.initLighting();
        
        // Set the clear color to black.
        GL11.glClearColor(0f, 0f, 0f, 1f);

        GL11.glMatrixMode(GL11.GL_PROJECTION);
        GL11.glLoadIdentity();
        GLU.gluPerspective(70.0f, (float) WINDOW_WIDTH / WINDOW_HEIGHT, 0.1f, 1000f);
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
        GL11.glHint(GL11.GL_PERSPECTIVE_CORRECTION_HINT, GL11.GL_NICEST);
    }
    
    // This handles user input from the keyboard.
    private void handleInput() {
        if (Keyboard.isKeyDown(Keyboard.KEY_N)) {
            isDay = false;
        } else if (Keyboard.isKeyDown(Keyboard.KEY_M)) {
            isDay = true;
        }
    }

    // The render loop. It now uses your TerrainGenerator to draw the full textured terrain.
    private void render() {
        // Create an instance of your terrain generator.
        TerrainGenerator terrain = new TerrainGenerator();
        
        while (!Display.isCloseRequested() && !Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {
            // Handle User Input
            handleInput();
            
            // Update the camera based on user input.
            camera.update();
            
            // Clear the screen and reset the modelview matrix.
            GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
            GL11.glLoadIdentity();
            
            // Apply the camera view transformation.
            camera.applyView();
           
            // Draw the skybox
            Skybox.setDay(isDay);
            Skybox.render(camera.x, camera.y, camera.z);
            
            // update light position after camera transformation
            Lighting.updateLight();
            
            // Draw the terrain (textured cubes generated via noise).
            terrain.drawTerrain();

            // Update and draw all chickens
            for (Chicken chicken : chickens) {
                chicken.update();
                chicken.draw();
            }
            
            Display.update();
            Display.sync(FRAME_RATE);
        }
        Display.destroy();
    }

    // Main method.
    public static void main(String[] args) {
        Basic basic = new Basic();
        basic.start();
    }
}
