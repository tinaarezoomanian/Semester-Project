/***************************************************************
* file: Cube.java
* author: Kenneth Chau, Tina Arezoomanians, Kelly Lwin
* class: CS 4450.01 (S25-Regular) Computer Graphics
*
* assignment: Final Program Checkpoint 1
* date last modified: 3/27/2025
*
* purpose: The program represents a Cube object in 3D space.
* note: The program contains code that is assisted but not generated by AI.
****************************************************************/

package Program1;

import org.lwjgl.opengl.GL11;

public class Cube {
    // public instance
    // Holds the current texture ID to use for drawing the cube.
    public static int currentTextureID;

    // method - drawTexturedCube  
    // purpose - renders a cube with textured faces and normals  
    public static void drawTexturedCube() {
        if(currentTextureID != -1) {
            GL11.glBindTexture(GL11.GL_TEXTURE_2D, currentTextureID);
        }
        
        GL11.glBegin(GL11.GL_QUADS);
        
        // Enable texture coordinates (you can adjust these as needed)
        
        // added normals for each cube face to calculate how light interfacts with each face
        // Front face
        GL11.glNormal3f(0, 0, -1);
        GL11.glTexCoord2f(0, 0); GL11.glVertex3f(-1, -1, -1);
        GL11.glTexCoord2f(1, 0); GL11.glVertex3f( 1, -1, -1);
        GL11.glTexCoord2f(1, 1); GL11.glVertex3f( 1,  1, -1);
        GL11.glTexCoord2f(0, 1); GL11.glVertex3f(-1,  1, -1);
        
        // Back face
        GL11.glNormal3f(0, 0, 1);
        GL11.glTexCoord2f(0, 0); GL11.glVertex3f(-1, -1, 1);
        GL11.glTexCoord2f(1, 0); GL11.glVertex3f( 1, -1, 1);
        GL11.glTexCoord2f(1, 1); GL11.glVertex3f( 1,  1, 1);
        GL11.glTexCoord2f(0, 1); GL11.glVertex3f(-1,  1, 1);
        
        // Left face
        GL11.glNormal3f(-1, 0, 0);
        GL11.glTexCoord2f(0, 0); GL11.glVertex3f(-1, -1, -1);
        GL11.glTexCoord2f(1, 0); GL11.glVertex3f(-1,  1, -1);
        GL11.glTexCoord2f(1, 1); GL11.glVertex3f(-1,  1,  1);
        GL11.glTexCoord2f(0, 1); GL11.glVertex3f(-1, -1,  1);
        
        // Right face
        GL11.glNormal3f(1, 0, 0);
        GL11.glTexCoord2f(0, 0); GL11.glVertex3f(1, -1, -1);
        GL11.glTexCoord2f(1, 0); GL11.glVertex3f(1,  1, -1);
        GL11.glTexCoord2f(1, 1); GL11.glVertex3f(1,  1,  1);
        GL11.glTexCoord2f(0, 1); GL11.glVertex3f(1, -1,  1);
        
        // Top face
        GL11.glNormal3f(0, 1, 0);
        GL11.glTexCoord2f(0, 0); GL11.glVertex3f(-1, 1, -1);
        GL11.glTexCoord2f(1, 0); GL11.glVertex3f( 1, 1, -1);
        GL11.glTexCoord2f(1, 1); GL11.glVertex3f( 1, 1,  1);
        GL11.glTexCoord2f(0, 1); GL11.glVertex3f(-1, 1,  1);
        
        // Bottom face
        GL11.glNormal3f(0, -1, 0);
        GL11.glTexCoord2f(0, 0); GL11.glVertex3f(-1, -1, -1);
        GL11.glTexCoord2f(1, 0); GL11.glVertex3f( 1, -1, -1);
        GL11.glTexCoord2f(1, 1); GL11.glVertex3f( 1, -1,  1);
        GL11.glTexCoord2f(0, 1); GL11.glVertex3f(-1, -1,  1);
        
        GL11.glEnd();
    }
}
